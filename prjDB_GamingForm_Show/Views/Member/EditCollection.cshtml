@model prjDB_GamingForm_Show.Models.Entities.MemberCollection

@{
    ViewData["Title"] = "EditCollection";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/ckeditor5-build-classic/ckeditor.js"></script>

@section Styles
{
    <style>
        .ck {
            height: 400px;
        }

        .ck-content {
            color: black
        }
    </style>
}
<div class="text-center">
    <h2>修改作品</h2>
    <h4>請輸入新的資料</h4>
</div>
<hr />
<div class="row text-center" style="margin:10px auto ; width:720px">
    <div class="row" style="margin:10px auto ; width:720px">
       @*  <input type="hidden" name="CId" value=@Model.Id /> *@
        <form asp-action="EditCollection">
            <input type="hidden" name="Id" value=@Model.Id />
            <input type="hidden" name="MemberId" value=@Model.MemberId />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Intro" class="control-label"></label>
                <input asp-for="Intro" class="form-control" />
                <span asp-validation-for="Intro" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="MyCollection" class="control-label"></label>
                <textarea id="editor" name="MyCollection">@Model.MyCollection</textarea>
            </div>
            <div class="form-group">
                <input type="submit" value="修改並送出" class="btn btn-default" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">回到會員首頁</a>
</div>

@section Scripts {

    <script>

        document.addEventListener('DOMContentLoaded', (event) => {
            ClassicEditor
                .create(document.querySelector('#editor'), {
                    extraPlugins: [MyCustomUploadAdapterPlugin],
                    mediaEmbed: {
                        previewsInData: true
                    }

                }).then(editor => {
                    // 在控制台中輸出所有可用的工具列項目名稱
                    console.log(Array.from(editor.ui.componentFactory.names()));
                })
                .catch(error => {
                    console.log(error);
                });
        });

        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload.
                this.loader = loader;
            }

            // Starts the upload process.
            upload() {
                var reader = new FileReader();

                return new Promise((resolve, reject) => {
                    reader.addEventListener('load', () => {
                        resolve({ default: reader.result });
                    });

                    reader.addEventListener('error', err => {
                        reject(err);
                    });

                    reader.addEventListener('abort', () => {
                        reject();
                    });

                    this.loader.file.then(file => {
                        reader.readAsDataURL(file);
                    });
                })
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            // Initializes the XMLHttpRequest object using the URL passed to the constructor.
            _initRequest() {
                const xhr = (this.xhr = new XMLHttpRequest());

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open("POST", "/Home/ImageTest", true);
                xhr.responseType = "json";
            }

            // Initializes XMLHttpRequest listeners.
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `無法上傳檔案: ${file.name}.`;

                xhr.addEventListener("error", () => reject(genericErrorText));
                xhr.addEventListener("abort", () => reject());
                xhr.addEventListener("load", () => {
                    const response = xhr.response;

                    console.log('response', response);

                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve({
                        default: response.url,
                    });
                });

                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if (xhr.upload) {
                    xhr.upload.addEventListener("progress", evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }

            // Prepares the data and sends the request.
            _sendRequest(file) {
                // Prepare the form data.
                const data = new FormData();

                data.append("Files", file);

                console.log('file:', file);

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.


                // Create a div element instead of a p element
                const progressContainer = document.createElement('div');
                progressContainer.classList.add('progress-container');

                // Create a div element for the progress bar
                const progressBar = document.createElement('div');
                progressBar.classList.add('progress-bar');
                progressContainer.appendChild(progressBar);

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.

                // Append the progress container to the document or a specific element
                document.body.appendChild(progressContainer);


                // Send the request.
                this.xhr.send(data);
            }
        }

        // ...
        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get("FileRepository").createUploadAdapter = loader => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }

        function validateForm() {
            var title = document.getElementById('articleTitle').value;
            var content = document.querySelector('textarea').value;

            if (title == '' || content == '') {
                alert('文章標題和內容不能為空！');
                return false; // 取消表單提交
            }

            return true; // 允許表單提交
        }

        function previewImage(input) {
            var imagePreview = document.getElementById('imagePreview');

            if (input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    imagePreview.src = e.target.result;
                    imagePreview.style.display = 'block';
                };

                reader.readAsDataURL(input.files[0]);
            }
        }
    </script>
}