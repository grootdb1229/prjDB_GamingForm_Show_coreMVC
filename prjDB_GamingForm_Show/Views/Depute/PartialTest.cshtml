@{
    // Layout = "~/Views/Shared/test.cshtml";
    // Layout = "~/Views/Shared/_Layout-test.cshtml";
}
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shadow DOM 示例</title>
    @* <link rel="stylesheet" href="~/layout/templatemo_555_upright/css/bootstrap.min.css">        <!-- https://getbootstrap.com/ --> *@
    @* <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"> *@
</head>
<body>

    <div class="accordion" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Accordion Item #1
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                </div>
            </div>
        </div>
    </div>

    <hr />

    <div id="my-shadow-host">
        <!-- 這裡是你要包裹的內容 -->
        <p>這是被包裹的內容。</p>
    </div>

    <script>
        // 取得要包裹的元素
        const shadowHost = document.getElementById('my-shadow-host');

        // 創建 Shadow DOM
        const shadowRoot = shadowHost.attachShadow({ mode: 'closed' });

        //Shadow DOM引用bootstrap CSS
        const li = document.createElement('link');
        li.href = "https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css";
        li.rel = "stylesheet";
        shadowRoot.appendChild(li);

        // 在 Shadow DOM 中添加內容
        const paragraph = document.createElement('div');
        paragraph.innerHTML = `<div class="accordion" id="accordionExample">
              <div class="accordion-item">
                <h2 class="accordion-header">
                  <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Accordion Item #1
                  </button>
                </h2>
                <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
                  <div class="accordion-body">
                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                  </div>
                </div>
              </div>
            </div>`;
        shadowRoot.appendChild(paragraph);

        //Shadow DOM引用bootstrap javascript
        const script=document.createElement('script');
        script.src = "https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js";
        shadowRoot.appendChild(script);
    </script>

</body>
</html>