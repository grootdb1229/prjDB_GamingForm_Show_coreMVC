@model prjDB_GamingForm_Show.Models.Entities.DeputeRecord
@{
    ViewData["Title"] = "完成委託";
    Layout = "~/Views/Shared/_Layout_DB.cshtml";
}

<h2 class="mt-5">完成委託</h2>
<h4>請輸入資訊</h4>
<hr class="col-10"/>
<div class="row">
    <div class="col-md-10">
        <form asp-action="ReplyDepute" id="formElement">
            <input name="id" value="@Model.Id" hidden/>
            <div class="mb-3">
                <label for="exampleFormControlTextarea1" class="form-label">完成作品說明</label>
                <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" name="ReplyContent"></textarea>
            </div>

            <div class="mb-3">
                <label for="formFileMultiple" class="form-label">上傳檔案</label>
                <input class="form-control" type="file" id="formFileMultiple" name="formFile">
            </div>
            <div id="providerName" hidden>@ViewBag.applyerName</div>
            @Html.ActionLink("取消", "homeframe", "depute", null, new { @class = "btn btn-secondary" })
            <input type="submit" class="btn btn-success" value="完成" id="buttonSubmit" />
        </form>
    </div>
</div>
<script>
    const btn = document.querySelector('#buttonSubmit');
    btn.addEventListener('click',async (event) => {
        event.preventDefault();
        const formElement = document.querySelector('#formElement');
        const formData = new FormData(formElement);
        const response = await fetch('@Url.Content("~/depute/replydepute")', {
            method: 'POST',
            body: formData
        });
        const result = await response.json();
        const icon = result.success ? "success" : "error";
        if (result.success) {
            Swal.fire({
                color: "#D0D0D0",
                background: "#343a40",
                scrollbarPadding: false,
                timer: 3000,
                timerProgressBar: true,
                title: `${result.message}`,
                text: "2秒後轉回委託頁面",
                icon: `${icon}`
            }).then(() => {
                sendMessageBySignalR();
                window.location.href = '@Url.Action("homeframe","depute")';
            })
        };
    })
    function sendMessageBySignalR() {
        let message = `您委託的項目已完成，請點擊查看`
        let sendToUserName = document.querySelector('#providerName').textContent;  // 接收者的使用者名稱
            console.log(sendToUserName)
        // 新增：呼叫 SignalR Hub 方法獲取接收者的 SignalR ID
        getSignalRIdByUserName(sendToUserName).then(function (connectionId) {
            // 修改：傳送訊息時使用接收者的 SignalR ID
            connection.invoke("SystemMessage", "委託", message, connectionId, sendToUserName).catch(function (err) {
                console.error('傳送錯誤: ' + err.toString());
            });
        });
    };
    function getSignalRIdByUserName(userName) {
        console.log("3")
        return new Promise((resolve, reject) => {
            connection.invoke("GetConnectionIdByUserName", userName).then(function (connectionId) {
                // 在這裡可以使用 connectionId 進行相應的處理
                resolve(connectionId);
            }).catch(function (err) {
                reject(err);
            });
        });
    }
</script>