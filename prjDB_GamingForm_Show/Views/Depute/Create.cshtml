@model prjDB_GamingForm_Show.Models.Entities.Depute

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout_DB.cshtml";
}
@section styles {

    <style>
        .custom-popover {
            --bs-popover-max-width: 200px;
            /* --bs-popover-border-color: var(--bd-violet-bg);
                  --bs-popover-header-bg: var(--bd-violet-bg); */
            --bs-popover-header-color: var(--bs-black);
            --bs-popover-body-padding-x: 1rem;
            --bs-popover-body-padding-y: .5rem;
        }
    </style>
}
<h2 class="mt-5">發佈委託</h2>

<h4>請輸入委託資訊</h4>
<hr class="col-10" />
<div class="row">
    <div class="col-md-10">
        <form class="needs-validation">
            <div class="p-3 mb-3 bg-opacity-10 border border-danger  rounded-end rounded-start">
                <div class="form-check form-switch form-check " style="">
                    <label class="form-check-label" style="color:white" for="privateCbx">開立專屬委託</label>
                    <input class="form-check-input" style="" type="checkbox" id="privateCbx" >
                </div>
                <input class="form-control col-4" type="text" id="privatetxt" placeholder="請輸入對方會員編號" value="@ViewBag.workerID" hidden />
                <input name="workerId" value="@ViewBag.workerID" hidden />
            </div>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-floating mb-3" hidden>
                <label asp-for="DeputeId" class="control-label"></label>
                <input asp-for="DeputeId" class="form-control" />
                <span asp-validation-for="DeputeId" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3" hidden>
                <label asp-for="ProviderId" class="control-label"></label>
                <input asp-for="ProviderId" class="form-control" />
                <span asp-validation-for="ProviderId" class="text-danger"></span>
            </div>
            <div class="row g-2">
                <div class="col-md">
                    <div class="form-floating mb-3">
                        <input name="title" class="form-control" id="Title" placeholder="" required />
                        <label asp-for="Title" for="Title">委託主題</label>
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md d-flex align-items-center">
                    <button class="btn btn-primary m-2" type="button" id="btnCreate" onclick="createContent()" disabled>
                        <span class="spinner-border spinner-border-sm" aria-hidden="true" id="spanSpin" hidden></span>
                        <span role="status" id="spanCreate">生成委託資訊</span>
                    </button>
                    <button class="btn btn-primary m-2" type="button" id="btnSelSkill" onclick="selectSkill()" disabled>
                        <span class="spinner-border spinner-border-sm" aria-hidden="true" id="spanSkillSpin" hidden></span>
                        <span role="status" id="spanSelSkill">依主題及內容選擇技能</span>
                    </button>
                </div>
            </div>
            <div class="form-floating mb-3" hidden>
                <input name="開始日期" value="@DateTime.Now" class="form-control" />
                <label asp-for="StartDate" class="control-label">開始時間</label>
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3" hidden>
                <input name="更新日期" value="@DateTime.Now" class="form-control" />
                <label asp-for="Modifiedate" class="control-label">更新時間</label>
                <span asp-validation-for="Modifiedate" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3" hidden>
                <input name="StatusId" class="form-control" id="StatusId" placeholder="statusid" value="18" />
            </div>
            <div class="row g-2">
                <div class="col-md">
                    <div class="form-floating mb-3">
                        <input name="salary" class="form-control" id="Salary" placeholder="" required />
                        <label asp-for="Salary" class="control-label" for="Salary">提供報酬</label>
                        <span asp-validation-for="Salary" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md">

                    <div class="form-floating  mb-3">
                        <select class="form-select" name="region" id="selRegions" required>
                       
                        </select>
                        <label for="selRegions" class="form-label">地區</label>
                        <div class="invalid-feedback">
                            請選擇一個地區
                        </div>
                    </div>

                </div>
            </div>
            <div class="form-floating mb-3">
                <textarea asp-for="DeputeContent" class="form-control" style="height:200px" placeholder="在這裡輸入您的委託資訊..." id="DeputeContent" placeholder="" required></textarea>
                <label asp-for="DeputeContent" class="control-label" for="DeputeContent">委託資訊</label>
                <span asp-validation-for="DeputeContent" class="text-danger"></span>
            </div>

            <span id="skillCount" hidden></span>
            <a class="btn btn-secondary mb-3" id="aSkillList"
               tabindex="0"
               data-bs-toggle="popover" data-bs-placement="right"
               data-bs-trigger="focus"
               data-bs-custom-class="custom-popover"
               data-bs-title="已選技能"
               data-bs-html="true"
               data-bs-content=''
               hidden>
                檢視所選技能
            </a>
            <button type="button" class="btn btn-info mb-3" onclick="openSkillBrowser()">編輯技能</button>
            <input name="skilllist" id="select-skills" hidden>
            <div>
            <button type="button" class="btn btn-light mb-3" onclick="DEMO(1)">DEMO</button>
            </div>
            <div class="form-floating mb-3">
                <a asp-action="homeframe" class="btn btn-secondary">取消</a>
                <input type="button" value="送出並發佈" class="btn btn-success" onclick="prepareAndSubmit()" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        function DEMO(step) {
            switch (step) {
                case 1:
                    $('#Title')[0].value = "神奇寶貝-灌鉛寶貝球";
                    $('#Salary')[0].value = "9000";
                    $('#DeputeContent')[0].value = `為了最小化神奇寶貝的勞動輸出，
我們要打造一顆只需要丟到神奇寶貝，
可以同時扣血並且收服的灌鉛寶貝球。

希望各方有創意的程式設計好手，加入我們。
完成這項造福神奇寶貝的創舉。`;
                    $('#selRegions')[0].selectedIndex = "1";
                    break;
            }
        }


        document.addEventListener('DOMContentLoaded', () => {
            var status = "";
            if (@Context.Session.GetInt32(CDictionary.SK_會員狀態編號) == 26) {
                status = "被封鎖會員無法進行此操作";
                Swal.fire({
                    color: "#D0D0D0",
                    background: "#343a40",
                    timer: 4000,
                    timerProgressBar: true,
                    title: `${status}`,
                    html: "將於<b></b>秒跳轉首頁",
                    icon: "warning",
                    didOpen: () => {
                        Swal.showLoading();
                        const timer = Swal.getPopup().querySelector("b");
                        timerInterval = setInterval(() => {
                            timer.textContent = `${(Swal.getTimerLeft() / 1000).toFixed(0)}`;
                            if (++timer.textContent < 0) {
                                clearInterval(timerInterval);
                            }
                        }, 100);
                    },
                    willClose: () => {
                        window.location.href = '@Url.Action("HomePage", "home")';
                    }
                })
            }

            const deputeTitle = document.querySelector('#Title');
            const btnCreate = document.querySelector('#btnCreate');
            const btnSelSkill = document.querySelector('#btnSelSkill');
            const content = document.querySelector('#DeputeContent');
            deputeTitle.addEventListener('input', () => {
                deputeTitle.value == "" ? btnCreate.disabled = true : btnCreate.disabled = false;
                content.value == "" || deputeTitle.value == "" ? btnSelSkill.disabled = true : btnSelSkill.disabled = false;
            })
            content.addEventListener('click', () => {
                content.value == "" || deputeTitle.value == "" ? btnSelSkill.disabled = true : btnSelSkill.disabled = false;
            })
        })

        async function selectSkill() {
            const btnSelSkill = document.querySelector('#btnSelSkill');
            const spanSkillSpin = document.querySelector('#spanSkillSpin');
            const spanSelSkill = document.querySelector('#spanSelSkill');
            btnSelSkill.disabled = true;
            spanSkillSpin.hidden = false;
            spanSelSkill.textContent = "篩選中...";


            const refTitle = document.querySelector('#Title');
            const content = document.querySelector('#DeputeContent');
            const response = await fetch(`@Url.Content("~/depute/selectSkill")?title=${refTitle.value}&content=${content.value}`);
            const datas = await response.text();
            console.log(response);
            console.log(datas);
            const skills = JSON.parse(datas).skill;
            console.log(skills);
            const responseSkill = await fetch(`@Url.Content("~/depute/SkillClasses")`)
            const dataSkills = await responseSkill.json();

            skills.forEach(function (skill) {
                let skillMatch = dataSkills.skills.find(_ => _.name === skill);

                if (!skillMatch) return;

                let skillClassId = skillMatch.skillClassId;
                let skillClassName = dataSkills.skillclasses.find(_ => _.skillClassId === skillClassId).name;
                selSkills.push({ skillclass: skillClassName, skill: skill });
            });

            skillsCount();

            btnSelSkill.disabled = false;
            spanSkillSpin.hidden = true;
            spanSelSkill.textContent = "依主題及內容選擇技能";
        }

        async function createContent() {
            const btnCreate = document.querySelector('#btnCreate');
            const spanSpin = document.querySelector('#spanSpin');
            const spanCreate = document.querySelector('#spanCreate');
            btnCreate.disabled = true;
            spanSpin.hidden = false;
            spanCreate.textContent = "產生中...";

            const refTitle = document.querySelector('#Title');
            if (refTitle.value == "")
                return;

            console.log(refTitle.value);
            const response = await fetch(`@Url.Content("~/depute/createContent")?title=${refTitle.value}`);
            const data = await response.text();
            const content = document.querySelector('#DeputeContent');
            content.value = data;

            btnCreate.disabled = false;
            spanSpin.hidden = true;
            spanCreate.textContent = "生成委託資訊";
        }


        const popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]');
        const popoverList = [...popoverTriggerList].map(popoverTriggerEl => new bootstrap.Popover(popoverTriggerEl));
        const selSkills = [];
        const divSkillClasses = document.querySelector('#list-tab'),
            divSkillsGroup = document.querySelector('#nav-tabContent');
        var selectedCount = 0;
        var chooseClass="程式";

        document.addEventListener('DOMContentLoaded', () => {
            const privateCbx = document.getElementById('privateCbx'),
                privateTxt = document.getElementById('privatetxt'),
                statusTxt = document.getElementById('StatusId');


            privateCbx.addEventListener('change', () => {
                privateTxt.hidden = !privateCbx.checked;
                privateCbx.checked ? statusTxt.innerHTML = 9 : statusTxt.innerHTML = 18
                privateTxt.name = "workerId";
                privateTxt.nextElementSibling.name = "";
            })

            if (privateTxt.value == "")
                return;

            privateTxt.textContent = privateTxt.value;

            privateTxt.hidden = false;
            privateTxt.disabled = true;

            privateCbx.checked = true;
            privateCbx.disabled = true;
        })

        $('*').click(function (event) {
            if (event.target.classList.contains('active')) {
                chooseClass = document.querySelector('.list-group-item.active').firstChild.textContent;
                chooseClassID = `list-${chooseClass}`;

                loadSkills();
            }
        })

        function openSkillBrowser() {
            Swal.fire({
                title: selectedCount == 0 ? `請選擇所需技能` : `請選擇所需技能(${selectedCount})`,
                width: '50rem',
                html: `<div class="accordion text-start" id="accordionExample" >
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" id="divaccordionbtn" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                                        已選擇技能(${selSkills.length}/5)
                                    </button>
                                </h2>
                                    <div id="collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionExample" style="">
                                        <div class="accordion-body"  style="color:black" id="divaccordion">

                                        </div>
                                    </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">
                                <div class="list-group" id="list-tab" role="tablist">
                                </div>
                            </div>
                            <div class="col-6">
                                <ul style="overflow-y:auto;height:300px" class="list-group tab-content" id="nav-tabContent">
                                </ul>
                                <ul class="list-group col-6">
                                </ul>
                            </div>
                        </div>
                            <div aria-live="polite" aria-atomic="true" class="d-flex justify-content-center align-items-center w-100" style="position:fixed;top: 65%; left: 50%; transform: translate(-50%, -50%);">
                            <div class="toast fade hide" role="alert" aria-live="assertive" aria-atomic="true" id="liveToast">
                                <div class="toast-body" style="color:black">
                                    選項已滿，最多選擇5個
                                </div>
                            </div>
                        </div>`
            });
            loadSkillClasses();
            refreshAccordion();
            skillsCount();
            refreshSwalTitle();
        }

        async function loadSkillClasses() {
            const divSkillClasses = document.querySelector('#list-tab'),
                divSkillsGroup = document.querySelector('#nav-tabContent');
            const response = await fetch('@Url.Content("~/depute/skillclasses")');
            const datas = await response.json();
            const skillclasses = datas.skillclasses.map(skillclass => {
                const count = skillclassesCount(skillclass.name);
                const spanhidden = count == 0 ? "hidden" : "";
                return `<a class="list-${skillclass.name}-item-action list-group-item skillclasstab" id="list-${skillclass.name}-list" data-bs-toggle="list" href="#list-${skillclass.name}" role="tab" aria-controls="list-${skillclass.name}">${skillclass.name}<span ${spanhidden}>(${count})</span><ul id=sel${skillclass.name} class="list-group col-6"></ul></a>`
            });
            const skillsgroup = datas.skillclasses.map(skillclass => `<div class="tab-pane fade" id="list-${skillclass.name}" role="tabpanel" aria-labelledby="list-${skillclass.name}-list">${skillclass.name}</div>`)
            divSkillClasses.innerHTML = skillclasses.join("");
            divSkillsGroup.innerHTML = skillsgroup.join("");
            if (chooseClassID) {
                loadSkills();
            }
        }

        async function loadSkills() {
            const response = await fetch(`@Url.Content("~/depute/skillss")?skillClass=${chooseClass}`);
            const datas = await response.json();
            const skills = datas.map(skill => {
                var checked = "";
                if (selSkills.find(_ => _.skillclass == `${chooseClass}` && _.skill == `${skill.name}`))
                    checked = "checked";
                return `<li class="list-group-item"><input class="form-check-input me-1" type="checkbox" value="" id="${skill.name}" ${checked}><label class="form-check-label stretched-link" for="${skill.name}">${skill.name}</label></li>`
            })
            document.querySelector(`#${chooseClassID}`).innerHTML = skills.join("");

            const divSkills = document.getElementsByClassName('me-1');

            Array.from(divSkills).forEach(divSkill => {
                divSkill.addEventListener('change', function (event) {
                    var selSK = event.target.labels[0].textContent;
                    if (event.target.checked) {
                        if (selSkills.length == 5) {
                            overfive();
                            event.target.checked = false;
                            return
                        }
                        selSkills.push({ skillclass: chooseClass, skill: selSK });
                    }
                    else {
                        const index = selSkills.findIndex(i => i.skillclass == chooseClass && i.skill == selSK);
                        selSkills.splice(index, 1);
                    }
                    console.log(selSkills);
                    refreshAccordion();
                    skillsCount();
                    refreshSwalTitle();
                })
            })
        }

        function removeSkill(event) {
            if (event == undefined) {
                selSkills.splice(0, selSkills.length);
                console.log(selSkills);
            }
            else {
                console.log(event.target.previousSibling);
                const skill = event.target.previousSibling.textContent;
                const skillteam = skill.split('-');
                const index = selSkills.findIndex(_ => _.skillclass == skillteam[0] && _.skill == skillteam[1]);
                selSkills.splice(index, 1);
            }
            loadSkills();
            refreshAccordion();
            skillsCount();
            refreshSwalTitle();
        }

        function overfive() {
            const toastOverFive = document.querySelector('#liveToast');
            const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastOverFive);
            toastBootstrap.show();
            setTimeout(function () {
                toastBootstrap.hide();
            }, 2000);
        }

        function skillclassesCount(SkillClassName) {
            var count = 0;
            count = selSkills.filter(_ => _.skillclass == SkillClassName).length;
            return count;
        }

        function skillsCount() {
            selectedCount = selSkills.length;
            
            const spanCount = document.querySelector('#skillCount');
            const aChoiceSkillList = document.querySelector('#aSkillList');

            var boolanyselected = selectedCount == 0;
            
            spanCount.textContent = boolanyselected ? "" : `已選擇${selectedCount}項技能`;
            spanCount.hidden = boolanyselected;
            aChoiceSkillList.hidden = boolanyselected;

            refreshSkillClassSpan();
            refreshChoiceSkillList();
        }

        function refreshSkillClassSpan() {
            const allskillclasstab = document.querySelectorAll('.skillclasstab');
            //因為nodelist只可讀取不可修改，故用Array.from()，轉換成陣列
            const allskillclasstablist = Array.from(allskillclasstab);

            allskillclasstablist.map(skillclass => {
                const skillclasscount = selSkills.filter(_ => _.skillclass == skillclass.firstChild.textContent).length,
                    boolSkillClassCountZero = skillclasscount == 0,
                    spanSkilClass = skillclass.lastChild.previousSibling;
                spanSkilClass.textContent = `(${skillclasscount})`;
                spanSkilClass.hidden = boolSkillClassCountZero;
            })
        }

        function refreshChoiceSkillList() {
            var popover = bootstrap.Popover.getOrCreateInstance('#aSkillList');
            const choiceskill = selSkills.map((skills, index) => `<li class='list-group-item'>${index + 1}.${skills.skillclass}-${skills.skill}</li>`);
            var newContent = `<ul class='list-group'>${choiceskill.join('')}</ul>`;
            popover.setContent({
                '.popover-header': '已選技能',
                '.popover-body': newContent
            });
        }

        function refreshSwalTitle() {
            selectedCount = selSkills.length;
            const divSkillTitle = document.querySelector('#swal2-title');
            var boolanyselected = selectedCount == 0;
            divSkillTitle.innerHTML = boolanyselected ? `請選擇所需技能` : `請選擇所需技能(${selectedCount})<buuton class="btn btn-secondary" onclick="removeSkill()">清除全部</button>`;
        }

        function refreshAccordion() {
            const divAccordion = document.querySelector('#divaccordion'),
                divAccordionBnt = document.querySelector('#divaccordionbtn');

            const skills = selSkills.map(skill => `<span class="badge rounded-pill text-bg-secondary m-1">${skill.skillclass}-${skill.skill}<button type="button" class="btn-close" aria-label="Close" onclick="removeSkill(event)"></button></span>`);
            var boolSkillCountZero = selSkills.length == 0;
            divAccordionBnt.disabled = boolSkillCountZero;
            divAccordion.innerHTML = skills.join('');
            divAccordionBnt.innerHTML = boolSkillCountZero ? `已選擇技能(0/5)` : `已選擇技能(${selSkills.length}/5)`;
        }

        async function loadRegions() {
            const response = await fetch(`@Url.Content("~/depute/regions")`);
            const datas = await response.json();
            const regions = datas.map(region => `<option value="${region.city}">${region.city}</option>`)
            var regionsString = "<option selected disabled value=''>請選擇地區</option>".concat(regions.join(""));
            document.querySelector("#selRegions").innerHTML = regionsString;
        }
        loadRegions();

        const inputSkill = document.getElementById('select-skills');
        async function prepareAndSubmit() {
            if (!checkForm())
                return;
            inputSkill.value = JSON.stringify(selSkills);
            const formData = new FormData(document.querySelector('form'));
            const response = await fetch('@Url.Content("~/depute/create")', {
                method: 'POST',
                body: formData
            });
            const result = await response.json();
            const icon = result.success ? "success" : "error";
            if (result.success) {
                Swal.fire({
                    showCancelButton: true,
                    color: "#D0D0D0",
                    background: "#343a40",
                    timer: 4000,
                    timerProgressBar: true,
                    title: `${result.message}`,
                    html: `將於<b></b>秒跳轉委託首頁 或者 <a class="btn btn-success" href="create">繼續發佈</button></a>`,
                    icon: `${icon}`,
                    didOpen: () => {
                        Swal.showLoading();
                        const timer = Swal.getPopup().querySelector("b");
                        timerInterval = setInterval(() => {
                            timer.textContent = `${(Swal.getTimerLeft() / 1000).toFixed(0)}`;
                            if (++timer.textContent < 0) {
                                clearInterval(timerInterval);
                            }
                        }, 100);
                    },
                    willClose: () => {
                        clearInterval(timerInterval);
                    }
                }).then((result) => {
                    if (result.dismiss === Swal.DismissReason.cancel) {
                        window.location.href = '@Url.Action("create", "depute")';
                    }
                    else {
                        window.location.href = '@Url.Action("homeframe", "depute")';
                    }
                })
            };
        }

        function checkForm() {
            'use strict';

            // 假設只有一個需要驗證的表單
            const form = document.querySelector('.needs-validation');

            if (form.checkValidity() === false) {
                form.classList.add('was-validated');
                return false; // 表單無效
            }

            return true; // 表單有效
        }
    </script>

}
