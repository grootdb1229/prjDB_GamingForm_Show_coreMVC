@model prjDB_GamingForm_Show.Models.Shop.CNewsLetter
<h2>NewsletterEdit</h2>

@{
    ViewData["Title"] = "NewsletterEdit";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<script src="~/ckeditor5-build-classic/ckeditor.js"></script>
<link rel="stylesheet" href="~/css/blogstyle.css" type="text/css">
@section Styles {
    <style>
        input {
            margin: 3px 0px;
        }

        label {
            margin: 3px 0px;
        }

        a {
            text-decoration: none
        }

        .ck {
            height: 400px;
        }

        .ck-editor__editable {
            color: black
        }

        input {
            margin: 3px
        }
    </style>
}
<header class="header-section">
    <div class="nav-options">
        <div class="container">
            <div class="nav-menu">
                <ul>
                    <li>
                        @Html.ActionLink("取消", "Newsletter", "Admin", null, null)
                        @*   @Html.ActionLink("回到文章", "ArticleContent", "Blog", new { AFId = Model.articles.FirstOrDefault().ArticleId, FId = Model.blogs.FirstOrDefault().BlogId }, new
                        {
                        @class = "btn btn-warning"
                        })
                        *@
                    </li>
                </ul>
            </div>
        </div>
    </div>

</header>


<div class="row" style="margin:10px auto;width:650px;background-color:#4F4F4F">
    <div class="col-md-12" style="background-color:#4F4F4F;border-radius:8px;box-shadow:0px 0px 8px 8px #cccccc">
        <div>
            <h2 style="text-align:center;margin:10px auto;color:whitesmoke;border-bottom:dotted">更改電子報</h2>
        </div>
        <form asp-action="NewsletterEdit" method="post" onsubmit="return validateForm()">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <input type="hidden" name="Id" value="@Model.Id" />

            <div class="form-group">
                <label class="control-label">電子報標題</label>
                <input asp-for="Title" class="form-control" id="articleTitle" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <label>文章內容</label>
            <textarea asp-for="HtmlContent" name="HtmlContent" id="editor" style="resize:none; height:700px; width: 100%;color:black">

            </textarea>

            <div class="form-group column" style="margin-top:4px;display: flex; justify-content: space-between;">
               @* <span style="margin-top:3px">
                    @Html.ActionLink("回到文章", "ArticleContent", "Blog", new { AFId = Model.articles.FirstOrDefault().ArticleId, FId = Model.blogs.FirstOrDefault().BlogId }, new
                    {
                    @class = "btn btn-warning"
                    })
                </span>*@
                <span>
                    <input type="submit" value="修改" class="btn btn-default" />
                </span>

            </div>
        </form>
    </div>
</div>


@section Scripts {

    <script>

        document.addEventListener('DOMContentLoaded', (event) => {
            ClassicEditor
                .create(document.querySelector('#editor'), {
                    extraPlugins: [MyCustomUploadAdapterPlugin],
                    mediaEmbed: {
                        previewsInData: true
                    }
                }).then(editor => {
                    // 獲取 CKEditor 實例，你可以在這裡保存或使用它
                    window.ckeditorInstance = editor;
                })
                .catch(error => {
                    console.log(error);
                });
        });

        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload.
                this.loader = loader;
            }

            // Starts the upload process.
            upload() {
                var reader = new FileReader();

                return new Promise((resolve, reject) => {
                    reader.addEventListener('load', () => {
                        resolve({ default: reader.result });
                    });

                    reader.addEventListener('error', err => {
                        reject(err);
                    });

                    reader.addEventListener('abort', () => {
                        reject();
                    });

                    this.loader.file.then(file => {
                        reader.readAsDataURL(file);
                    });
                })
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            // Initializes the XMLHttpRequest object using the URL passed to the constructor.
            _initRequest() {
                const xhr = (this.xhr = new XMLHttpRequest());

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open("POST", "/Home/ImageTest", true);
                xhr.responseType = "json";
            }

            // Initializes XMLHttpRequest listeners.
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `無法上傳檔案: ${file.name}.`;

                xhr.addEventListener("error", () => reject(genericErrorText));
                xhr.addEventListener("abort", () => reject());
                xhr.addEventListener("load", () => {
                    const response = xhr.response;

                    console.log('response', response);

                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve({
                        default: response.url,
                    });
                });

                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if (xhr.upload) {
                    xhr.upload.addEventListener("progress", evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }

            // Prepares the data and sends the request.
            _sendRequest(file) {
                // Prepare the form data.
                const data = new FormData();

                data.append("Files", file);

                console.log('file:', file);

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.


                // Create a div element instead of a p element
                const progressContainer = document.createElement('div');
                progressContainer.classList.add('progress-container');

                // Create a div element for the progress bar
                const progressBar = document.createElement('div');
                progressBar.classList.add('progress-bar');
                progressContainer.appendChild(progressBar);

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.

                // Append the progress container to the document or a specific element
                document.body.appendChild(progressContainer);


                // Send the request.
                this.xhr.send(data);
            }
        }

        // ...
        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get("FileRepository").createUploadAdapter = loader => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }
        function validateForm() {
            var title = document.getElementById('articleTitle').value;
            var editor = window.ckeditorInstance;

            // 獲取編輯器內容
            var content = editor.getData();

            if (title.trim() == '' || content.trim() == '') {
                alert('文章標題和內容不能為空！');
                return false; // 取消表單提交
            }

            return true; // 允許表單提交
        }

    </script>
}
