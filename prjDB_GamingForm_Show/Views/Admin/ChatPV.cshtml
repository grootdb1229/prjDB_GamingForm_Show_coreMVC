@model IEnumerable<prjDB_GamingForm_Show.ViewModels.CAdminChatViewModel>
<head>
    <style>
        .sender {
            text-align: right;
            border-radius: 5px;
            background-color: #0080FF;
            color: antiquewhite;
            margin-left: auto;
            margin-right: 5px;
            padding: 5px;
            margin-bottom: 5px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .receiver {
            text-align: left;
            border-radius: 5px;
            background-color: #272727;
            color: antiquewhite;
            margin-right: auto;
            margin-left: 5px;
            padding: 5px;
            margin-bottom: 5px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .messageP {
            align-self: flex-end;
            font-size: 20px;
            margin-top: 8px;
            margin-bottom: 0px;
            color: #FCFCFC
        }

        .messageSpan {
            color: #BEBEBE
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
</head>
<div style="height:520px;width:350px">
    <div style="border-bottom:groove 3px black;border-radius:5px;display: flex; align-items: center; padding: 10px;">
        <img src="~/production/images/@Model.FirstOrDefault().ReceiverImg" alt="..." class="img-circle profile_img" style="height:7vh;width:7vh;margin-right: 10px;margin-left:0px;margin-top:0px">
        <div style="flex-grow: 1;">
            <span id="rn" style="font-size:30px;color:cornsilk">@ViewBag.SendToName</span>
            <span id="sn" hidden>@Context.Session.GetString(CDictionary.SK_管理者名稱)</span>
        </div>
        <button type="button" class="btn btn-primary" style="position: absolute; top: 5px; right: 5px; font-size: 20px; background: none; border: none;" onclick="closeChat()">
            <i class="fa-solid fa-xmark"></i>
        </button>
    </div>
    <div id="chatContent" style="height:350px ;max-height: 350px; overflow-y: auto;display: flex; flex-direction: column;" ">
    @foreach (var chat in Model)
    {
        if (chat.SenderName == Context.Session.GetString(CDictionary.SK_管理者名稱))
        {
                <div class="sender">
                    <span class="messageSpan">@chat.ModefiedDate</span>
                    <p class="messageP">@chat.ChatContent</p>
                </div>
        }
        else
        {
                <div class="receiver">
                    <span class="messageSpan">@chat.ModefiedDate</span>
                    <p class="messageP">@chat.ChatContent</p>
                </div>
        }
    }
    </div>
    <div class="form-floating" style="display: flex; align-items: flex-end;margin-top:5px;">
        <textarea class="form-control" placeholder="請輸入..." id="message" style="border-radius:5px;background-color:#E0E0E0;"></textarea>
        <button type="button" class="btn btn-primary" id="sendButton"><i class="fa-solid fa-paper-plane"></i></button>
    </div>

</div>

<script>
    //傳送訊息
    $('#sendButton').on('click', sendMessageBySignalR);

    $('#message').on('keydown', function (event) {
        if (event.key === "Enter" && !event.shiftKey) {
            event.preventDefault();
            sendMessageBySignalR();
        }
    });
    function sendMessageBySignalR() {
        let selfUserName = $('#sn').text() // 使用者名稱
        let message = $('#message').val();
        let sendToUserName = $('#rn').text() // 接收者的使用者名稱

        // 新增：呼叫 SignalR Hub 方法獲取接收者的 SignalR ID
        getSignalRIdByUserName(sendToUserName).then(function (connectionId) {
            // 修改：傳送訊息時使用接收者的 SignalR ID
            connection.invoke("SendMessage", selfUserName, message, connectionId, sendToUserName).catch(function (err) {
                console.error('傳送錯誤: ' + err.toString());
            });
        });
        document.querySelector('#message').value = "";
    };
    function getSignalRIdByUserName(userName) {
        return new Promise((resolve, reject) => {
            connection.invoke("GetConnectionIdByUserName", userName).then(function (connectionId) {
                // 在這裡可以使用 connectionId 進行相應的處理
                resolve(connectionId);
            }).catch(function (err) {
                reject(err);
            });
        });
    }
    // 更新聊天內容事件
    connection.on("SenderUpdContent", function (msg) {
        var messageBlock = document.getElementById("chatContent");

        // 獲取當前日期時間
        var currentDate = new Date();

        // 格式化日期時間
        var formattedDateTime = currentDate.getFullYear() + "/" +
            (currentDate.getMonth() + 1).toString().padStart(2, '0') + "/" +
            currentDate.getDate().toString().padStart(2, '0') + " " +
            currentDate.getHours().toString().padStart(2, '0') + ":" +
            currentDate.getMinutes().toString().padStart(2, '0');

        // 創建一個 <div> 用於分辨發送人或接收人
        var div = document.createElement("div")
        div.classList.add("sender")
        messageBlock.appendChild(div)

        // 創建一個 <span> 用於顯示時間
        var timeSpan = document.createElement("span");
        timeSpan.classList.add("messageSpan")
        timeSpan.innerText = formattedDateTime;

        // 將 <span> 加入訊息內容
        div.appendChild(timeSpan);

        // 創建一個新的 <p> 元素
        var newMessage = document.createElement("p");
        newMessage.classList.add("messageP")
        // 設定新元素的內容為用戶傳遞的訊息
        newMessage.innerText = msg;

        // 將新元素加入訊息區塊
        div.appendChild(newMessage);

        // 卷軸捲到最底部
        messageBlock.scrollTop = messageBlock.scrollHeight;
    });
    connection.on("ReceiverUpdContent", function (msg) {
        var messageBlock = document.getElementById("chatContent");

        // 獲取當前日期時間
        var currentDate = new Date();

        // 格式化日期時間
        var formattedDateTime = currentDate.getFullYear() + "/" +
            (currentDate.getMonth() + 1).toString().padStart(2, '0') + "/" +
            currentDate.getDate().toString().padStart(2, '0') + " " +
            currentDate.getHours().toString().padStart(2, '0') + ":" +
            currentDate.getMinutes().toString().padStart(2, '0');

        // 創建一個 <div> 用於分辨發送人或接收人
        var div = document.createElement("div")
        div.classList.add("receiver")
        messageBlock.appendChild(div)

        // 創建一個 <span> 用於顯示時間
        var timeSpan = document.createElement("span");
        timeSpan.classList.add("messageSpan")
        timeSpan.innerText = formattedDateTime;

        // 將 <span> 加入訊息內容
        div.appendChild(timeSpan);

        // 創建一個新的 <p> 元素
        var newMessage = document.createElement("p");
        newMessage.classList.add("messageP")
        // 設定新元素的內容為用戶傳遞的訊息
        newMessage.innerText = msg;

        // 將新元素加入訊息區塊
        div.appendChild(newMessage);

        // 卷軸捲到最底部
        messageBlock.scrollTop = messageBlock.scrollHeight;
    });
    var chatContentDiv = document.getElementById("chatContent");
    chatContentDiv.scrollTop = chatContentDiv.scrollHeight;

    function closeChat() {
        var div = document.querySelector('#AdminsChat');
        div.style.display = "none"; // 隱藏
    }
</script>


