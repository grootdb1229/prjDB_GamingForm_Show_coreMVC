@model prjDB_GamingForm_Show.Models.Shop.超酷warp

@{
	ViewBag.Title = "Edit";
}

<div class="container px-4 px-lg-5 mt-2">
	<h2>修改商品</h2>

	@using (Html.BeginForm("Edit", "Shop", FormMethod.Post, new { enctype = "multipart/form-data", id = "productform" }))
	{
		@Html.AntiForgeryToken()

		<div class="form-horizontal">
			<h4>請輸入商品資料</h4>
			<hr />
			@Html.ValidationSummary(true, "", new { @class = "text-danger" })
			@Html.HiddenFor(model => model.ProductId)		
			<div class="form-group">
				@Html.LabelFor(model => model.ImageID, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					<label class="btn btn-info">
						<input id="upload_img" name="Photos" style="display:none;" multiple="multiple" onchange="previewImages(this)" type="file">
						<i class="fa-solid fa-file"></i>上傳圖片
					</label>
					<div id="imagePreviewContainer" style="width:100%">
						<div style="display: inline-block; position: relative;">
							<img id="imagePreview" class="previewImage" data-filename="@Model.FImagePath" style="max-width: 300px; max-height: 300px; margin-top: 10px;" src="~/images/shop/@Model.FImagePath" />
							<span class="deleteButton" style="position: absolute; top: 0; right: 0; cursor: pointer;" onclick="deleteImage(this)">X</span>
						</div>
						@{
							if (Model.MulPic != null)
							{
								string[] pics = @Model.MulPic.Split('/');
								foreach (var item in pics)
								{
									if (item != "")
									{
										<div style="display: inline-block; position: relative;">
											<img class="previewImage" data-filename="@item" style="max-width: 300px; max-height: 300px; margin-top: 10px;" src="~/images/shop/@item" />
											<span class="deleteButton" style="position: absolute; top: 0; right: 0; cursor: pointer;" onclick="deleteImage(this)">X</span>
										</div>
									}
								}
							}
						}
					</div>
				</div>
			</div>
			<input type="hidden" id="hiddenInputPic" name="MulEditPic" />

			<div class="form-group">
				@Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
				</div>
			</div>



			<label class="control-label col-md-2">支援語言：</label>
			<div class="form-group" id="language" style="border: 1px solid #ccc; padding: 10px; overflow-y: auto; width:50vw;">
				<div class="d-flex flex-wrap">
					<!-- 內容會自動調整高度 -->
				</div>
			</div>
			<label class="control-label col-md-2">遊戲類別：</label>
			<div class="form-group" id="GameTag" style="border: 1px solid #ccc; padding: 10px; overflow-y: auto; width:50vw;">
				<div class="d-flex flex-wrap">
					<!-- 內容會自動調整高度 -->
				</div>
			</div>
			
			<input type="hidden" id="LanguageOptions" name="LanguageOptions" /> <!--藏選擇好的標籤傳遞給後端-->
			<input type="hidden" id="GameTagOptions" name="GameTagOptions" />

			<div class="form-group">
				@Html.LabelFor(model => model.ProductContent, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@*@Html.EditorFor(model => model.ProductContent, new { htmlAttributes = new { @class = "form-control" } })*@
					<textarea style="width: 50vw; height: 45vh; resize: none;" name="ProductContent" cols="120">@Model.ProductContent</textarea>
					@Html.ValidationMessageFor(model => model.ProductContent, "", new { @class = "text-danger" })
				</div>
			</div>



			<div class="form-group">
				<div class="col-md-offset-2 col-md-10">
					<input type="submit" value="送出並更新" class="btn btn-default" id="btnsubmit" />
				</div>
			</div>
		</div>
	}



	@section Scripts
		{
		


		<!--子標籤視窗大小-->
		<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
		<script>
			$(document).ready(function () {
				// 監聽textarea內容變化
				$('#ProductContent').on('input', function () {
					// 根據內容設置div高度
					var contentHeight = $(this).prop('scrollHeight');
					$('#dynamicDiv').height(contentHeight);
				});
			});
		</script>
		<!--圖片呈現-->
		<script>
			function deleteImage(deleteButton) {
				// 找到要刪除的圖片及其父節點
				var imageContainer = deleteButton.parentNode;

				// 刪除整個包裹圖片和刪除按鈕的 div
				imageContainer.parentNode.removeChild(imageContainer);
			}
		</script>

		<script>
			function previewImages(input) {
				var previewContainer = document.getElementById('imagePreviewContainer');

				var files = input.files;
				for (var i = 0; i < files.length; i++) {
					var file = files[i];
					var reader = new FileReader();

					reader.onloadend = (function (currentReader) {
						return function () {
							var img = document.createElement('img');
							img.src = currentReader.result;

							img.style.width = '220px';
							img.style.height = '180px';
							img.style.objectFit = 'cover'; // 'contain'會保持比例。

							var deleteButton = document.createElement('span');
							deleteButton.innerHTML = 'X';
							deleteButton.style.cursor = 'pointer';
							deleteButton.onclick = function () {
								// Call a function to delete the corresponding image
								deleteImage(deleteButton);
							};

							previewContainer.innerHTML += '<div style="display: inline-block; position: relative;">' +
								'<img src="' + currentReader.result + '" style="width: 220px; height: 180px; object-fit: cover;">' +
								'<span style="position: absolute; top: 0; right: 0; cursor: pointer;" onclick="deleteImage(this)">X</span>' +
								'</div>';
						};
					})(reader);

					if (file) {
						reader.readAsDataURL(file);
					}
				}
			}
		</script>
		<!--放Tag-->
		<script>

			const LangDiv = document.querySelector('#language .d-flex');
			const TagDiv = document.querySelector('#GameTag .d-flex');


			async function LoadLang() {
				const response = await fetch('@Url.Content("~/Shop/language")');
				const data = await response.json();

				const Language = data.map(x => `
					<div class="col-3">
						<label style="margin-bottom: 10px; display: block;">
							<input type="checkbox" name="GameTag" value="${x.subTagId}">${x.name}
						</label>
					</div>
				`).join('');

				LangDiv.innerHTML = Language;

				
				await preCheckSelectedTags('LanguageOptions');
				submitTags();
			}

			async function LoadTag() {
				const response = await fetch('@Url.Content("~/Shop/GameTag")');
				const data = await response.json();

				const Tag = data.map(x => `
					<div class="col-3">
						<label style="margin-bottom: 10px; display: block;">
							<input type="checkbox" name="GameTag" value="${x.subTagId}">${x.name}
						</label>
					</div>
				`).join('');

				TagDiv.innerHTML = Tag;

			
				await preCheckSelectedTags('GameTagOptions');
				submitTags();
			}

			// 檢查有沒有選過的標籤
			const productId = document.getElementById('ProductId').value;
			// console.log(productId);
			async function preCheckSelectedTags(hiddenInputId) {
				const selectedTags = await fetch(`@Url.Content("~/Shop/WhenYouEditTags")?id=${productId}`);
				const selectedTagsData = await selectedTags.json();
				// console.log(selectedTagsData);
				selectedTagsData.forEach(tagId => {
					const checkbox = document.querySelector(`input[name="GameTag"][value="${tagId}"]`);
					if (checkbox) {
						checkbox.checked = true;
					}
				});
			}

		
			LoadLang();
			LoadTag();

			///如何從checkbox取值
			function collectSelectedOptions(checkboxName) {
				const checkboxes = document.getElementsByName(checkboxName);
				const selectedOptions = Array.from(checkboxes)
					.filter(checkbox => checkbox.checked)
					.map(checkbox => checkbox.value);

				return selectedOptions.join(',');
			}

			function submitTags() {


				const gameTagOptions = collectSelectedOptions("GameTag");

				//將被勾起來的選項藏到hidden元素
				document.getElementById("GameTagOptions").value = gameTagOptions;

				return true;
			}

			async function submitForm(event) {
				event.preventDefault(); // 阻止表單的默認提交行為
				await submitTags(); // 等待 submitTags 完成

				var filenames = "";
				var previewImages = document.getElementsByClassName('previewImage');

				for (var i = 0; i < previewImages.length; i++) {
					var filename = previewImages[i].getAttribute('data-filename');
					filenames += filename + "/";
				}
				document.getElementById('hiddenInputPic').value = filenames;



				document.getElementById('productform').submit(); // 手動提交表單
			}

			document.addEventListener('DOMContentLoaded', function () {
				const form = document.getElementById('productform');
				form.addEventListener('submit', submitForm);
			});







		</script>


	}